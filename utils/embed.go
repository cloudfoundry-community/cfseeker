package main

import (
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"strings"
)

func main() {
	out, err := os.Create("api/assets.go")
	if err != nil {
		fmt.Fprintf(os.Stderr, "Failed to open api/assets.go for writing: %s\n", err)
		os.Exit(1)
	}

	fmt.Fprintf(out, `package api
// Totally stolen from github.com/bolo/ui
// You go, James Hunt
// auto-generated by utils/embed.go
var assets = map[string][]byte{}

func init() {

`)

	for _, arg := range os.Args[1:] {
		embedPath(arg, "", out)
	}

	fmt.Fprintf(out, "\n}\n")
}

func embedPath(path, prefix string, out io.Writer) {
	st, err := os.Stat(path)
	if err != nil {
		fmt.Fprintf(os.Stderr, "Unable to stat %s: %s\n", path, err)
		os.Exit(2)
	}

	if st.IsDir() {
		files, err := ioutil.ReadDir(path)
		if err != nil {
			fmt.Fprintf(os.Stderr, "Unable to descend into %s: %s\n", path, err)
			os.Exit(2)
		}
		for _, f := range files {
			if strings.Index(f.Name(), ".") != 0 {
				if prefix == "" {
					embedPath(fmt.Sprintf("%s/%s", path, f.Name()), f.Name(), out)
				} else {
					embedPath(fmt.Sprintf("%s/%s", path, f.Name()), fmt.Sprintf("%s/%s", prefix, f.Name()), out)
				}
			}
		}
		return
	}

	bb, err := ioutil.ReadFile(path)
	if err != nil {
		fmt.Fprintf(os.Stderr, "Unable to read %s: %s\n", path, err)
		os.Exit(2)
	}

	fmt.Fprintf(out, "\tassets[\"/%s\"] = []byte{", prefix)
	for i, b := range bb {
		if i%16 == 0 {
			fmt.Fprintf(out, "\n\t\t")
		}
		fmt.Fprintf(out, "%#x, ", b)
	}
	fmt.Fprintf(out, "\n\t}\n")
}
